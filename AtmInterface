import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
class BankAccount {
    private double balance;
    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }
    public double getBalance() {
        return balance;
    }
    public void deposit(double amount) {
        balance += amount;
    }
    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        } else {
            return false; // Insufficient funds
        }
    }
}
class ATM {
    private BankAccount account;
    public ATM(BankAccount account) {
        this.account = account;
    }
    public boolean withdraw(double amount) {
        return account.withdraw(amount);
    }
    public void deposit(double amount) {
        account.deposit(amount);
    }
    public double checkBalance() {
        return account.getBalance();
    }
}
public class ATMGUI {
    private ATM atm;
    public ATMGUI(ATM atm) {
        this.atm = atm;
        createAndShowGUI();
    }
    private void createAndShowGUI() {
        JFrame frame = new JFrame("ATM Interface");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 1));
        JButton withdrawButton = new JButton("Withdraw");
        JButton depositButton = new JButton("Deposit");
        JButton balanceButton = new JButton("Check Balance");
        JLabel resultLabel = new JLabel("");
        panel.add(withdrawButton);
        panel.add(depositButton);
        panel.add(balanceButton);
        panel.add(resultLabel);
        withdrawButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                performWithdrawal(resultLabel);
            }
        });
        depositButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                performDeposit(resultLabel);
            }
        });
        balanceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                displayBalance(resultLabel);
            }
        });
        frame.add(panel);
        frame.setVisible(true);
    }
    private void performWithdrawal(JLabel resultLabel) {
        String amountString = JOptionPane.showInputDialog("Enter amount to withdraw:");
        try {
            double amount = Double.parseDouble(amountString);
            boolean success = atm.withdraw(amount);
            if (success) {
                resultLabel
                        .setText("Withdrawal successful. New balance: Rs " + String.format("%.2f", atm.checkBalance()));
            } else {
                resultLabel
                        .setText(
                                "Insufficient funds. Current balance: Rs " + String.format("%.2f", atm.checkBalance()));
            }
        } catch (NumberFormatException ex) {
            resultLabel.setText("Invalid input. Please enter a valid number.");
        }
    }
    private void performDeposit(JLabel resultLabel) {
        String amountString = JOptionPane.showInputDialog("Enter amount to deposit:");
        try {
            double amount = Double.parseDouble(amountString);
            atm.deposit(amount);
            resultLabel.setText("Deposit successful. New balance: Rs " + String.format("%.2f", atm.checkBalance()));
        } catch (NumberFormatException ex) {
            resultLabel.setText("Invalid input. Please enter a valid number.");
        }
    }
    private void displayBalance(JLabel resultLabel) {
        resultLabel.setText("Current balance: Rs " + String.format("%.2f", atm.checkBalance()));
    }
    public static void main(String[] args) {
        BankAccount account = new BankAccount(2000); // Initial balance of 2000
        ATM atm = new ATM(account);
        new ATMGUI(atm);
    }
}

